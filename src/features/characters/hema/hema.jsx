/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/newAvatart.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'


export const Hema = React.memo((props) => {
 
  const { scene } = useGLTF('/characters/hema/model/hema.glb');
  const { animations: IdleAnimation } = useFBX('/characters/hema/animations/Standing Idle.fbx');
  const { animations: Waving} = useFBX('characters/hema/animations/Standing Idle.fbx')
//   const { animations: Talking } = useFBX('/animation/Talking.fbx');
//   const { animations: QuickFormalBow } = useFBX('/animation/Quick Formal Bow.fbx');

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  IdleAnimation[0].name = "Idle";
//   QuickFormalBow[0].name = "Greeting";
//   Talking[0].name = "Talking";
  Waving[0].name = "Waving";

  const group = useRef();
  const [animation, setAnimation] = useState("Idle");
  const { actions } = useAnimations([IdleAnimation[0],Waving[0]], group);

  const [headMesh, setHeadMesh] = useState(null); // For morph targets
  const eyeLeftRef = useRef();
  const eyeRightRef = useRef();
  const headMeshRef = useRef();
  const blinkInterval = useRef();

  // ðŸ§  Grab head mesh for morph targets
  useEffect(() => {
    if (nodes.Wolf3D_Head && nodes.Wolf3D_Head.morphTargetDictionary) {
      setHeadMesh(nodes.Wolf3D_Head);
    }
  }, [nodes]);

  // ðŸŽ¬ Play character animation


// ðŸŽ¬ Smooth animation fade in/out handler
useEffect(() => {
    const action = actions?.[animation];
    action?.reset().fadeIn(0.5).play();

    return () => {
        const cleanupAction = actions?.[animation];
        if (cleanupAction) {
            cleanupAction.fadeOut(0.5);
        }
    };
}, [animation, actions]);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh ref={eyeLeftRef} name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh ref={eyeRightRef} name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh ref={headMeshRef} name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
})

useGLTF.preload('/characters/hema/model/hema.glb')
