/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export const Sita = React.memo((props) => {
  const [playAudio, setPlayAudio] = useState(false);
  const [script, setScript] = useState("welcome");

  const { scene } = useGLTF(
    "/characters/sita/model/689af04d9da143aefed4e691.glb"
  );
  const { animations: IdleAnimation } = useFBX(
    "/characters/sita/animations/Idle.fbx"
  );
  const { animations: Waving } = useFBX(
    "/characters/sita/animations/Waving.fbx"
  );

  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  IdleAnimation[0].name = "Idle";
  Waving[0].name = "Waving";

  const group = useRef();
  const { actions } = useAnimations([IdleAnimation[0], Waving[0]], group);

  const eyeLeftRef = useRef();
  const eyeRightRef = useRef();
  const blinkInterval = useRef();
  const blinkTimeout = useRef();

  // ---------------------------
  // TEXT â†’ FAKE lipSync LOGIC
  // ---------------------------
  const lipSyncIndex = useRef(0);
  const lipSyncTimer = useRef(null);
  const currentViseme = useRef(null);

  const voiceType = ["oldMan", "youngMan", "oldWoman", "youngWoman"];
  const selectedVoice = (value, text) => {
    const utterance = new SpeechSynthesisUtterance(text);
    /**
     * for adultMan rate = .9 and pitch = .8
     * for adultWoman rate = .8 and pitch = 1.1
     * for oldMan rate = .7 and pitch = .6
     * for oldWoman rate = .7 and pitch = .9
     */
    utterance.lang = "en-US";
    utterance.rate = 0.9;
    utterance.pitch = 0.8;
    switch (value) {
      case " adultMan":
        utterance.rate = 0.9;
        utterance.pitch = 0.8;

        break;
      case "oldWoman":
        utterance.rate = 0.7;
        utterance.pitch = 0.9;
        break;

      default:
        break;
    }

    utterance.onend = () => {
      clearInterval(lipSyncTimer.current);
      currentViseme.current = null;
    };

    speechSynthesis.speak(utterance);
  };

  const startlipSyncFromText = (text) => {
    if (speechSynthesis.speaking) {
      // Already speaking â†’ don't start again
      return;
    }

    const visemes = Object.values(corresponding);
    const totalSteps = text.length * 2;
    let index = 0;

    if (lipSyncTimer.current) clearInterval(lipSyncTimer.current);

    // ðŸ”Š Speak text as audio

    // pick a voice (optional)
    selectedVoice("adultMan", text);

    // When finished speaking â†’ clear visemes + stop lipSync

    // ðŸ‘„ Animate visemes while speaking
    lipSyncTimer.current = setInterval(() => {
      Object.values(corresponding).forEach((v) => {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[v]
        ] = 0;
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[v]
        ] = 0;
      });

      const v = visemes[index % visemes.length];
      currentViseme.current = v;

      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[v]
      ] = 1;
      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[v]
      ] = 1;

      index++;
      if (index >= totalSteps) {
        clearInterval(lipSyncTimer.current);
        currentViseme.current = null;
      }
    }, 150);
  };

  // ---------------------------
  // BLINKING LOGIC
  // ---------------------------
  useEffect(() => {
    const blink = () => {
      if (!eyeLeftRef.current || !eyeRightRef.current) return;
      const blinkDuration = 0.2; // seconds
      const startTime = Date.now();

      const animateBlink = () => {
        const elapsed = (Date.now() - startTime) / 1000;
        const progress = Math.min(elapsed / blinkDuration, 1);
        const scaleY = Math.sin(progress * Math.PI) * 0.1 + 0.9;
        eyeLeftRef.current.scale.y = scaleY;
        eyeRightRef.current.scale.y = scaleY;
        if (progress < 1) {
          requestAnimationFrame(animateBlink);
        } else {
          eyeLeftRef.current.scale.y = 1;
          eyeRightRef.current.scale.y = 1;
        }
      };
      requestAnimationFrame(animateBlink);
    };

    const cleanup = () => {
      if (blinkInterval.current) clearInterval(blinkInterval.current);
      if (blinkTimeout.current) clearTimeout(blinkTimeout.current);
    };

    cleanup();

    const scheduleBlink = () => {
      const nextBlink = 2000 + Math.random() * 3000;
      blinkTimeout.current = setTimeout(() => {
        blink();
        scheduleBlink();
      }, nextBlink);
    };

    blinkTimeout.current = setTimeout(() => {
      blink();
      scheduleBlink();
    }, 1000 + Math.random() * 2000);

    return cleanup;
  }, [eyeLeftRef.current, eyeRightRef.current]);

  // ---------------------------
  // DEFAULT IDLE ANIMATION
  // ---------------------------
  useEffect(() => {
    if (actions["Idle"]) {
      actions["Idle"].reset().fadeIn(0.2).play();
    }
  }, [actions]);

  // ---------------------------
  // POINTER EVENTS
  // ---------------------------
  const handlePointerOver = () => {
    if (actions["Waving"]) {
      actions["Idle"]?.fadeOut(0.2);
      actions["Waving"].reset().fadeIn(0.2).play();

      setScript("welcome");

      // trigger fake lipSync with text
      // startlipSyncFromText("Welcome, nice to meet you!");
    }
  };

  const handlePointerOut = () => {
    if (actions["Waving"]) {
      actions["Waving"].fadeOut(0.2);
      actions["Idle"]?.reset().fadeIn(0.2).play();
      setPlayAudio(false);
      clearInterval(lipSyncTimer.current);
    }
  };

  return (
    <group
      {...props}
      dispose={null}
      ref={group}
      onPointerOver={handlePointerOver}
      onPointerOut={handlePointerOut}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        ref={eyeLeftRef}
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        ref={eyeRightRef}
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
});

useGLTF.preload("/characters/sita/model/689af04d9da143aefed4e691.glb");
