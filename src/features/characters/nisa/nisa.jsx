/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useContext, useEffect, useMemo, useRef, useState } from "react";
import { useControls } from "leva";
import { useFrame, useGraph , useLoader} from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { AuthContext } from "../../../common/helper/AuthContext";
import { createVoiceUtterance } from "../../../utils/voiceUtils";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export const Nisa = React.memo((props) => {
  const { greeting, avatarSpeech, setAvatarSpeech, selectedAvatar } =
    useContext(AuthContext);

  //   const [lipSync, setLipSync] = useState(null);
  // const [audio, setAudio] = useState(null);
  // const [playAudio, setPlayAudio] = useState(false);
  // const [script, setScript] = useState("welcome");

  // const { playAudio, script } = useControls({
  //   playAudio: false,
  //   script: {
  //     value: "welcome",
  //     options: ["welcome", "greeting"],
  //   },
  // });

  const audio = new Audio(`/characters/nisa/audio/greetingFirst.mp3`)


  const jsonFile = useLoader(
    THREE.FileLoader,
    `/characters/nisa/audio/greetingFirst.json`
  );
  const lipSync = JSON.parse(jsonFile);

    useEffect(() => {
      if (props.suppressSpeech) return;
      if (audio) {
        audio.play().catch(() => {});
      }
  }, [audio]);

  // LipSync Animation Frame
 


  //   useEffect(() => {
  //     console.log("avatarSpeech", avatarSpeech)
  //   if (!avatarSpeech) return;

  //   // Load new audio
  //   const newAudio = new Audio(avatarSpeech.audio_url);
  //   newAudio.crossOrigin = "anonymous";
  //   setAudio(newAudio);

  //   // Fetch lipsync JSON
  //   fetch(avatarSpeech.lipsync_url)
  //     .then((res) => res.json())
  //     .then((data) => setLipSync(data))
  //     .catch((err) => console.error("LipSync JSON load failed:", err));
  // }, [avatarSpeech]);

  useFrame(() => {
    const currentAudioTime = audio.currentTime;
    Object.values(corresponding).forEach((value)=>{
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]]=0;
       nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]]=0;

    })
    for (let i = 0; i < lipSync.mouthCues.length; i++) {
      const mouthCue = lipSync.mouthCues[i];
      if (
        currentAudioTime >= mouthCue.start &&
        currentAudioTime <= mouthCue.end
      ) {
  nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]]=1;
       nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]]=1;

        break;
      }
    }
  });

  

  const { scene } = useGLTF(
    "/characters/nisa/model/6895bab8ce2240ac4ff74492.glb"
  );
  const { animations: IdleAnimation } = useFBX(
    "/characters/nisa/animations/Standing Idle.fbx"
  );
  const { animations: Waving } = useFBX(
    "/characters/nisa/animations/Waving.fbx"
  );

  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  IdleAnimation[0].name = "Idle";
  Waving[0].name = "Waving";

  const group = useRef();
  const { actions } = useAnimations([IdleAnimation[0], Waving[0]], group);

  const eyeLeftRef = useRef();
  const eyeRightRef = useRef();
  const blinkInterval = useRef();
  const blinkTimeout = useRef();

  // ---------------------------
  // TEXT â†’ FAKE lipSync LOGIC
  // ---------------------------
  const lipSyncIndex = useRef(0);
  const lipSyncTimer = useRef(null);
  const currentViseme = useRef(null);

  useEffect(() => {
    if (actions["Idle"]) {
      actions["Idle"].reset().fadeIn(0.2).play();
    }
  }, [actions]);

  const handlePointerOver = () => {
  if (!props.suppressSpeech) audio.play();

    if (actions["Waving"]) {
      actions["Idle"]?.fadeOut(0.2);
      actions["Waving"].reset().fadeIn(0.2).play();
    }
  };

  const handlePointerOut = () => {
  if (!props.suppressSpeech) audio.pause();
    if (actions["Waving"]) {
      actions["Waving"].fadeOut(0.2);
      actions["Idle"]?.reset().fadeIn(0.2).play();
    }
  };

  return (
    <group
      {...props}
      dispose={null}
      ref={group}
      onPointerOver={handlePointerOver}
      onPointerOut={handlePointerOut}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        ref={eyeLeftRef}
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        ref={eyeRightRef}
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
});

useGLTF.preload("/characters/nisa/model/6895bab8ce2240ac4ff74492.glb");
