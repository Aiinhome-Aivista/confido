/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useContext, useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph, useLoader } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { AuthContext } from "../../../common/helper/AuthContext";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export const Ravi = React.memo((props) => {

  const { scene } = useGLTF(
    "/characters/ravi/model/68a06329bf8e07103ad164bd.glb"
  );
  const { animations: IdleAnimation } = useFBX(
    "/characters/ravi/animations/Idle.fbx"
  );
  const { animations: Waving } = useFBX(
    "/characters/ravi/animations/Waving.fbx"
  );

  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  IdleAnimation[0].name = "Idle";
  Waving[0].name = "Waving";
 const group = useRef();
   const { actions } = useAnimations([IdleAnimation[0], Waving[0]], group);

  const { greeting, avatarSpeech, setAvatarSpeech, selectedAvatar,hoverAvatar, isSpeakerOn } =
      useContext(AuthContext);
  
    const [lipSync, setLipSync] = useState(null);
    const [audio, setAudio] = useState(null);

      const eyeLeftRef = useRef();
      const eyeRightRef = useRef();
    
   
  
  
  
   
    // greetingMessage();
   const selectionMessage = () => {
       const audio = new Audio(`/characters/ravi/audio/greeting.mp3`)
      const jsonFile = useLoader(
        THREE.FileLoader,
        `/characters/ravi/audio/greeting.json`
      );
      setAudio(audio), setLipSync(JSON.parse(jsonFile));
    };
  
    useEffect(() => {
      if (audio) {
        audio.play().catch(() => {});
      }
    }, [audio]);

      // Stop and clear when speaker toggles off
      useEffect(() => {
        if (!isSpeakerOn) {
          if (audio) {
            try {
              audio.pause();
              audio.currentTime = 0;
            } catch (e) {}
          }
          setAudio(null);
          setLipSync(null);
        }
      }, [isSpeakerOn]);

    // Stop audio when avatarSpeech is cleared
    useEffect(() => {
      if (!avatarSpeech && audio) {
        try {
          audio.pause();
          audio.currentTime = 0;
        } catch (e) {}
        setAudio(null);
        setLipSync(null);
      }
    }, [avatarSpeech]);
  
    // LipSync Animation Frame: only when avatarSpeech is for Ravi
    useEffect(() => {
      if (!avatarSpeech || avatarSpeech.avatarName !== "Ravi") {
        if (audio) {
          try {
            audio.pause();
            audio.currentTime = 0;
          } catch (e) {}
        }
        setAudio(null);
        setLipSync(null);
        return;
      }

      if (!isSpeakerOn) {
        if (audio) {
          try {
            audio.pause();
            audio.currentTime = 0;
          } catch (e) {}
        }
        setAudio(null);
        setLipSync(null);
        return;
      }

      const newAudio = new Audio(avatarSpeech.audio_url);
      newAudio.crossOrigin = "anonymous";
      setAudio(newAudio);

      fetch(avatarSpeech.lipsync_url)
        .then((res) => res.json())
        .then((data) => setLipSync(data))
        .catch((err) => console.error("LipSync JSON load failed:", err));
    }, [avatarSpeech]);
  
    useFrame(() => {
      if (!audio || !lipSync) return;

      const currentAudioTime = audio.currentTime;
      Object.values(corresponding).forEach((value) => {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[value]
        ] = 0;
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[value]
        ] = 0;
      });
      for (let i = 0; i < (lipSync.mouthCues || []).length; i++) {
        const mouthCue = lipSync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
          ] = 1;
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              corresponding[mouthCue.value]
            ]
          ] = 1;

          break;
        }
      }
    });
  
    // useEffect(() => {
    //   if(playAudio){
    //     audio.play();
  
    //   }else{
    //     audio.pause();
    //   }
    // }, [playAudio, script]);
  
  
  
  
  
    useEffect(() => {
      if (actions["Idle"]) {
        actions["Idle"].reset().fadeIn(0.2).play();
      }
    }, [actions]);

  // ...existing code...
  
    const handlePointerOver = () => {
      if (actions["Waving"]) {
        actions["Idle"]?.fadeOut(0.2);
        actions["Waving"].reset().fadeIn(0.2).play();
      }
    };
  
    const handlePointerOut = () => {
      if (actions["Waving"]) {
        actions["Waving"].fadeOut(0.2);
        actions["Idle"]?.reset().fadeIn(0.2).play();
      }
    };






  return (
    <group
      {...props}
      dispose={null}
      ref={group}
      onPointerOver={handlePointerOver}
      onPointerOut={handlePointerOut}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        ref={eyeLeftRef}
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        ref={eyeRightRef}
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
});

useGLTF.preload("/characters/ravi/model/68a06329bf8e07103ad164bd.glb");
